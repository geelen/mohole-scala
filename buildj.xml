<?xml version="1.0"?>
<!--
    $LastChangedRevision$
    $LastChangedDate$
-->

<project name="Build Java and Scala source projects" default="init" basedir=".">
  <property file="archive.properties"/>

  <property name="archive.file" value="TODO"/>
  <property name="build.username" value="TODO"/>
  <property name="build.password" value="TODO"/>
  <property name="release.file.name.prefix" value="TODO"/>
  <property name="release.file.dir.prefix" value="TODO"/>
  <property name="repository" value="TODO"/>

  <property name="begin.filtertoken" value="%"/>
  <property name="build.dir" value="build"/>
  <property name="deps-fast-src.build.dir" value="${build.dir}/classes/deps-fast-src"/>
  <property name="deps-fast-test-src.build.dir" value="${build.dir}/classes/deps-fast-test-src"/>
  <property name="deps-src.dir" value="src/deps-main"/>
  <property name="deps-test-src.dir" value="src/deps-test"/>
  <property name="end.filtertoken" value="%"/>
  <property name="etc.dir" value="etc"/>
  <property name="fast-src.build.dir" value="${build.dir}/classes/fast-src"/>
  <property name="fast-test-src.build.dir" value="${build.dir}/classes/fast-test-src"/>
  <property name="functionaljava.version" value="artifacts/2.16"/>
  <property name="java.api.level" value="1.5.0"/>
  <property name="java.source.level" value="1.5"/>
  <property name="java.target.level" value="1.5"/>
  <property name="javadoc.bottom" value=""/>
  <property name="javadoc.doctitle" value="Java 2&lt;br/&gt; API Specification"/>
  <property name="javadoc.footer" value=""/>
  <property name="javadoc.header" value=""/>
  <property name="javadoc.windowtitle" value="Java 2"/>
  <property name="package-info.dir" value="src/package-info"/>
  <property name="projects.repository.uri" value="http://projects.tmorris.net/public/"/>
  <property name="repository.artifacts" value="artifacts"/>
  <property name="repository.jar" value="jar"/>
  <property name="repository.tags" value="tags"/>
  <property name="repository.trunk" value="trunk"/>
  <property name="resources.dir" value="resources"/>
  <property name="resources.prefix" value=""/>
  <property name="scala.antlib" value="scala/tools/ant/antlib.xml"/>
  <property name="scala.lib.path" value="lib"/>
  <property name="scala.version" value="2.7.3"/>
  <property name="scaladoc.bottom" value=""/>
  <property name="scaladoc.doctitle" value="Scala 2&lt;br/&gt; API Specification"/>
  <property name="scaladoc.footer" value=""/>
  <property name="scaladoc.header" value=""/>
  <property name="scaladoc.top" value=""/>
  <property name="scaladoc.windowtitle" value="Scala 2"/>
  <property name="software.repository.uri" value="http://software.tmorris.net/artifacts/"/>
  <property name="standards.version" value="1.17"/>
  <property name="src" value="src"/>
  <property name="src.dir" value="${src}/main"/>
  <property name="src.prefix" value=""/>
  <property name="svnkit.version" value="1.1.4"/>
  <property name="test-src.dir" value="${src}/test"/>
  <property name="test-src.prefix" value=""/>

  <filterset id="filtertokens" begintoken="${begin.filtertoken}" endtoken="${end.filtertoken}">
    <filtersfile file="tokens.properties"/>
    <filter token="java.version" value="${java.version}"/>
    <filter token="scala.version" value="${scala.version}"/>
    <filter token="build.number" value="${build.number}"/>
  </filterset>

  <path id="sdk.libs.path" description="JAR files from the SDK">
    <fileset dir="/opt/appengine-java-sdk/lib/user" includes="**/*.jar"/>
  </path>

  <path id="webinf.libs.path" description="JAR files and ZIP files in the WEB-INF directory">
    <fileset dir="${resources.dir}/WEB-INF/lib" includes="**/*.jar"/>
  </path>

  <path id="libs.path" description="JAR files and ZIP files in the lib directory">
    <fileset dir="${build.dir}/lib" includes="**/*.jar"/>
    <fileset dir="${build.dir}/lib" includes="**/*.zip"/>
    <path refid="sdk.libs.path"/>
    <path refid="webinf.libs.path"/>
  </path>

  <path id="build.path" description="built class files">
    <pathelement path="${build.dir}/classes/src"/>
    <pathelement path="${build.dir}/classes/test-src"/>
    <pathelement path="${build.dir}/classes/deps-src"/>
    <pathelement path="${build.dir}/classes/deps-test-src"/>
  </path>

  <path id="fast.build.path" description="fast built class files">
    <pathelement path="${build.dir}/classes/fast-src"/>
    <pathelement path="${build.dir}/classes/fast-test-src"/>
    <pathelement path="${build.dir}/classes/deps-fast-src"/>
    <pathelement path="${build.dir}/classes/deps-fast-test-src"/>
  </path>

  <path id="project.path" description="the project-wide path">
    <path refid="libs.path"/>
    <path refid="build.path"/>
    <pathelement location="${resources.dir}"/>
    <pathelement path="${java.class.path}"/>
  </path>

  <path id="fast.project.path" description="the project-wide path for fast builds">
    <path refid="libs.path"/>
    <path refid="build.path"/>
    <path refid="fast.build.path"/>
    <pathelement location="${resources.dir}"/>
    <pathelement path="${java.class.path}"/>
  </path>

  <target name="dependencies" unless="done.dependencies" description="get dependencies">
    <get src="${projects.repository.uri}/standards/artifacts/${standards.version}/javadoc-style/javadoc-style.css"
         dest="${build.dir}/javadoc-style.css"
         usetimestamp="true"/>
    <mkdir dir="${build.dir}/j2se/${java.api.level}"/>
    <get src="${software.repository.uri}/package-list-j2se/${java.api.level}/package-list"
         dest="${build.dir}/j2se/${java.api.level}/package-list" usetimestamp="true"/>
    <mkdir dir="${build.dir}/scaladoc-style"/>
    <get src="${projects.repository.uri}/standards/artifacts/${standards.version}/scaladoc-style/script.js"
         dest="${build.dir}/scaladoc-style/script.js"
         usetimestamp="true"/>
    <get src="${projects.repository.uri}/standards/artifacts/${standards.version}/scaladoc-style/style.css"
         dest="${build.dir}/scaladoc-style/style.css"
         usetimestamp="true"/>
    <property name="done.dependencies" value="true"/>
  </target>

  <target name="layout" unless="done.layout" description="layout the project structure">
    <mkdir dir="${etc.dir}"/>
    <mkdir dir="${resources.dir}"/>
    <mkdir dir="${src.dir}"/>
    <mkdir dir="${test-src.dir}"/>
    <mkdir dir="${deps-src.dir}"/>
    <mkdir dir="${deps-test-src.dir}"/>
    <mkdir dir="${package-info.dir}"/>
    <touch file="archive.properties" millis="0"/>
    <touch file="tokens.properties" millis="0"/>
    <touch file="resources/WEB-INF/classes/META-INF/MANIFEST.MF" mkdirs="true" millis="0"/>
    <property name="done.layout" value="true"/>
  </target>

  <target name="init" depends="layout" description="initialise the project"/>

  <target name="clean" description="delete the build environment">
    <delete dir="${build.dir}/classes"/>
    <delete dir="${build.dir}/src"/>
    <delete dir="${build.dir}/test-src"/>
    <delete dir="${build.dir}/war"/>
  </target>

  <macrodef name="token-filter">
     <attribute name="src"/>
     <attribute name="dest"/>
     <attribute name="overwrite" default="false"/>
     <sequential>
      <mkdir dir="@{src}"/>
      <mkdir dir="@{dest}"/>
      <copy todir="@{dest}" filtering="true" overwrite="@{overwrite}">
        <fileset file="@{src}/**"/>
        <filterset refid="filtertokens"/>
      </copy>
     </sequential>
  </macrodef>

  <macrodef name="javadoc-links">
    <element name="links" optional="yes"/>
    <sequential>
      <fail unless="build.number" message="set the build.number property (required for source links in javadoc)"/>
      <javadoc packagenames="*"
               destdir="${build.dir}/javadoc"
               failonerror="true"
               stylesheetfile="${build.dir}/javadoc-style.css"
               windowtitle="${javadoc.windowtitle}"
               doctitle="${javadoc.doctitle}"
               header="${javadoc.header}"
               footer="${javadoc.footer}"
               bottom="${javadoc.bottom}">
        <sourcepath path="${build.dir}/src"/>
        <sourcepath path="${build.dir}/package-info"/>
        <classpath refid="project.path"/>
        <link href="http://java.sun.com/j2se/${java.api.level}/docs/api/" offline="true"
              packagelistloc="${build.dir}/j2se/${java.api.level}"/>
        <links/>
      </javadoc>
     </sequential>
  </macrodef>

  <macrodef name="scaladoc-links">
    <element name="links" optional="yes"/>
    <sequential>
      <fail unless="build.number" message="set the build.number property (required for source links in scaladoc)"/>
      <taskdef resource="${scala.antlib}" classpathref="libs.path"/>
      <scaladoc srcdir="${build.dir}/src" destdir="${build.dir}/scaladoc" classpathref="project.path"
          bottom="${scaladoc.bottom}"
          doctitle="${scaladoc.doctitle}"
          footer="${scaladoc.footer}"
          header="${scaladoc.header}"
          top="${scaladoc.top}"
          windowtitle="${scaladoc.windowtitle}">
        <include name="**/**.scala"/>
      </scaladoc>
      <token-filter src="${build.dir}/scaladoc-style" dest="${build.dir}/scaladoc" overwrite="true"/>
      <links/>
     </sequential>
  </macrodef>

  <target name="copy-src" description="copy source files with filtering">
    <token-filter src="${src.dir}" dest="${build.dir}/src"/>
    <token-filter src="${package-info.dir}" dest="${build.dir}/package-info"/>
  </target>

  <target name="copy-test-src" description="copy test source files with filtering">
    <token-filter src="${test-src.dir}" dest="${build.dir}/test-src"/>
  </target>

  <target name="javadoc" depends="init, copy-src" description="javadoc the project">
    <mkdir dir="${build.dir}/javadoc"/>
    <javadoc-links/>
  </target>

  <target name="scaladoc" depends="init, copy-src, javac, scalac" description="scaladoc the project">
    <mkdir dir="${build.dir}/scaladoc"/>
    <scaladoc-links/>
  </target>
 
  <macrodef name="compile-java">
    <attribute name="src"/>
    <attribute name="classes"/>
    <attribute name="classpath"/>
    <sequential>
      <mkdir dir="@{classes}"/>
      <javac srcdir="@{src}" destdir="@{classes}" source="${java.source.level}" target="${java.target.level}" debug="on" deprecation="on"
           failonerror="true" classpathref="@{classpath}">
        <include name="**/*.java"/>
        <compilerarg value="-Xlint:unchecked"/>
      </javac>
    </sequential>
  </macrodef>

  <macrodef name="compile-scala">
    <attribute name="src"/>
    <attribute name="classes"/>
    <attribute name="classpath"/>
    <sequential>
      <taskdef resource="${scala.antlib}" classpathref="libs.path"/>
      <mkdir dir="@{classes}"/>
      <scalac srcdir="@{src}" destdir="@{classes}" force="always" deprecation="on" unchecked="on"
              classpathref="@{classpath}">
        <include name="**/**.scala"/>
      </scalac>
    </sequential>
  </macrodef>

  <macrodef name="fast-compile">
    <attribute name="src"/>
    <attribute name="classes"/>
    <attribute name="classpath"/>
    <sequential>
      <taskdef resource="${scala.antlib}" classpathref="libs.path"/>
      <mkdir dir="@{classes}"/>
      <fsc srcdir="@{src}" destdir="@{classes}" force="always" deprecation="on" unchecked="on"
              classpathref="@{classpath}" failonerror="true">
        <include name="**/**.scala"/>
      </fsc>
    </sequential>
  </macrodef>

  <macrodef name="link">
    <attribute name="from"/>
    <attribute name="to"/>
    <sequential>
      <delete file="@{from}"/>
      <dirname file="@{from}" property="link.@{from}"/>
      <echo message="link.@{from} ${link.@{from}} from @{from}"/>
      <mkdir dir="${link.@{from}}"/>
      <symlink link="@{from}" resource="@{to}" overwrite="true"/>
    </sequential>
  </macrodef>

  <target name="javac-deps" depends="init" description="compile the dependent Java source">
    <compile-java src="${deps-src.dir}" classes="${build.dir}/classes/deps-src" classpath="libs.path"/>
  </target>

  <target name="javac" depends="init, copy-src, javac-deps" description="compile the Java source">
    <compile-java src="${build.dir}/src" classes="${build.dir}/classes/src" classpath="libs.path"/>
  </target>

  <target name="javac-deps-test" depends="javac" description="compile dependent Java test source">
    <compile-java src="${deps-test-src.dir}" classes="${build.dir}/classes/deps-test-src" classpath="project.path"/>
  </target>

  <target name="javac-test" depends="javac, copy-test-src, javac-deps-test" description="compile Java test source">
    <compile-java src="${build.dir}/test-src" classes="${build.dir}/classes/test-src" classpath="project.path"/>
  </target>

  <target name="scalac-deps" depends="javac" description="compile dependent Scala source">
    <compile-scala src="${deps-src.dir}" classes="${build.dir}/classes/deps-src" classpath="project.path"/>
  </target>

  <target name="scalac" depends="javac, copy-src, scalac-deps" description="compile Scala source">
    <compile-scala src="${build.dir}/src" classes="${build.dir}/classes/src" classpath="project.path"/>
  </target>

  <target name="scalac-deps-test" depends="javac-test, scalac" description="compile dependent Scala test source">
    <compile-scala src="${deps-test-src.dir}" classes="${build.dir}/classes/deps-test-src" classpath="project.path"/>
  </target>

  <target name="scalac-test" depends="javac-test, scalac, copy-test-src, scalac-deps-test" description="compile Scala test source">
    <compile-scala src="${build.dir}/test-src" classes="${build.dir}/classes/test-src" classpath="project.path"/>
  </target>

  <target name="fast-scalac-deps" depends="javac" description="fast compile dependent Scala source">
    <fast-compile src="${deps-src.dir}" classes="${deps-fast-src.build.dir}" classpath="fast.project.path"/>
  </target>

  <target name="fast-scalac" depends="javac, fast-scalac-deps" description="fast compile Scala source">
    <fast-compile src="${src.dir}" classes="${fast-src.build.dir}" classpath="fast.project.path"/>
  </target>

  <target name="fast-scalac-deps-test" depends="fast-scalac, javac-test" description="fast compile dependent Scala test source">
    <fast-compile src="${deps-test-src.dir}" classes="${deps-fast-test-src.build.dir}" classpath="fast.project.path"/>
  </target>

  <target name="fast-scalac-test" depends="fast-scalac, javac-test, fast-scalac-deps-test" description="fast compile Scala test source">
    <fast-compile src="${test-src.dir}" classes="${fast-test-src.build.dir}" classpath="fast.project.path"/>
  </target>

  <target name="run" depends="javac-test, scalac-test" description="run a compiled class">
    <fail unless="main" message="Set the main property"/>
    <property name="args" value=""/>
    <java classname="${main}" failonerror="true">
      <arg line="${args}"/>
      <classpath refid="project.path"/>
    </java>
  </target>

  <target name="archive-layout" depends="javac-test, scalac-test" description="lay out the distribution archive file">
    <mkdir dir="${build.dir}/archive-layout"/>
    <mkdir dir="${build.dir}/archive-layout/${src.prefix}"/>
    <copy todir="${build.dir}/archive-layout/${src.prefix}">
      <fileset dir="${build.dir}/classes/src" includes="**/**"/>
    </copy>
    <copy todir="${build.dir}/archive-layout/${src.prefix}">
      <fileset dir="${build.dir}/classes/deps-src" includes="**/**"/>
    </copy>
    <mkdir dir="${build.dir}/archive-layout/${test-src.prefix}"/>
    <copy todir="${build.dir}/archive-layout/${test-src.prefix}">
      <fileset dir="${build.dir}/classes/test-src" includes="**/**"/>
    </copy>
    <copy todir="${build.dir}/archive-layout/${test-src.prefix}">
      <fileset dir="${build.dir}/classes/deps-test-src" includes="**/**"/>
    </copy>
    <mkdir dir="${build.dir}/archive-layout/${resources.prefix}"/>
    <copy todir="${build.dir}/archive-layout/${resources.prefix}">
      <fileset dir="${resources.dir}" includes="**/**"/>
    </copy>
  </target>

  <target name="archive" depends="archive-layout" description="create the distribution archive file">
    <mkdir dir="${build.dir}/archive"/>
    <zip destfile="${build.dir}/archive/${archive.file}">
      <zipfileset dir="${build.dir}/archive-layout">
        <include name="**/**"/>
      </zipfileset>
    </zip>
  </target>

  <target name="dist-javadoc" depends="javadoc" description="copy javadoc">
    <fail unless="dest" message="Set the dest property"/>
    <mkdir dir="${dest}/javadoc"/>
    <copy todir="${dest}/javadoc">
      <fileset dir="${build.dir}/javadoc"/>
    </copy>
  </target>

  <target name="dist-scaladoc" depends="scaladoc" description="copy scaladoc">
    <fail unless="dest" message="Set the dest property"/>
    <mkdir dir="${dest}/scaladoc"/>
    <copy todir="${dest}/scaladoc">
      <fileset dir="${build.dir}/scaladoc"/>
    </copy>
  </target>

  <target name="dist-src" depends="copy-src" description="copy source">
    <fail unless="dest" message="Set the dest property"/>
    <mkdir dir="${dest}/src"/>
    <copy todir="${dest}/src">
      <fileset dir="${build.dir}/src"/>
    </copy>
  </target>

  <target name="dist-test-src" depends="copy-test-src" description="copy test source">
    <fail unless="dest" message="Set the dest property"/>
    <mkdir dir="${dest}/test-src"/>
    <copy todir="${dest}/test-src">
      <fileset dir="${build.dir}/test-src"/>
    </copy>
  </target>

  <target name="dist-archive" depends="archive" description="copy archive">
    <fail unless="dest" message="Set the dest property"/>
    <mkdir dir="${dest}"/>
    <copy file="${build.dir}/archive/${archive.file}" tofile="${dest}/${archive.file}"/>
  </target>

  <target name="dist-etc" description="copy etc">
    <fail unless="dest" message="Set the dest property"/>
    <mkdir dir="${dest}"/>
    <copy todir="${dest}" overwrite="true">
      <fileset file="${etc.dir}/**"/>
    </copy>
  </target>

  <target name="dist" description="distribution files">
    <fail unless="dest" message="Set the dest property"/>
    <antcall target="dist-javadoc"/>
    <antcall target="dist-scaladoc"/>
    <antcall target="dist-src"/>
    <antcall target="dist-test-src"/>
    <antcall target="dist-archive"/>
    <antcall target="dist-etc"/>
    <antcall target="dist-release"/>
  </target>

  <target name="release" description="create release files">
    <fail unless="dest" message="Set the dest property"/>
    <mkdir dir="${dest}"/>
    <mkdir dir="${build.dir}/release"/>
    <zip destfile="${build.dir}/release/${release.file.name.prefix}.zip">
      <zipfileset dir="${dest}" prefix="${release.file.dir.prefix}"/>
    </zip>
    <tar destfile="${build.dir}/release/${release.file.name.prefix}.tar.gz" compression="gzip">
      <tarfileset dir="${dest}" prefix="${release.file.dir.prefix}"/>
    </tar>
    <checksum file="${build.dir}/release/${release.file.name.prefix}.zip" algorithm="MD5"/>
    <checksum file="${build.dir}/release/${release.file.name.prefix}.zip" algorithm="SHA"/>
    <checksum file="${build.dir}/release/${release.file.name.prefix}.tar.gz" algorithm="MD5"/>
    <checksum file="${build.dir}/release/${release.file.name.prefix}.tar.gz" algorithm="SHA"/>
  </target>

  <target name="dist-release" depends="release" description="copy release files">
    <fail unless="dest" message="Set the dest property"/>
    <mkdir dir="${dest}/release"/>
    <copy todir="${dest}/release">
      <fileset dir="${build.dir}/release" includes="**/**"/>
    </copy>
  </target>

  <target name="maven" depends="archive, javadoc" description="Create artifacts for maven">
    <fail unless="build.number" message="set the build.number property"/>
    <mkdir dir="${build.dir}/maven"/>
    <copy file="${build.dir}/archive/${archive.file}" tofile="${build.dir}/maven/${release.file.name.prefix}-${build.number}.jar"/>
    <copy file="pom.xml" todir="${build.dir}/maven"/>
    <zip destfile="${build.dir}/maven/${release.file.name.prefix}-${build.number}-javadoc.jar">
      <zipfileset dir="${build.dir}/javadoc"/>
    </zip>
    <zip destfile="${build.dir}/maven/${release.file.name.prefix}-${build.number}-sources.jar">
      <zipfileset dir="${build.dir}/src"/>
      <zipfileset dir="${build.dir}/test-src"/>
    </zip>
    <mkdir dir="${build.dir}/maven/bundle"/>
    <zip destfile="${build.dir}/maven/bundle/${release.file.name.prefix}-${build.number}.jar">
      <zipfileset dir="${build.dir}/maven">
        <include name="${release.file.name.prefix}-${build.number}.jar"/>
        <include name="${release.file.name.prefix}-${build.number}-javadoc.jar"/>
        <include name="${release.file.name.prefix}-${build.number}-sources.jar"/>
        <include name="pom.xml"/>
      </zipfileset>
    </zip>
  </target>

  <target name="dist-maven" depends="maven" description="copy release files">
    <fail unless="dest" message="Set the dest property"/>
    <mkdir dir="${dest}/maven"/>
    <copy todir="${dest}/maven">
      <fileset dir="${build.dir}/maven" includes="**/**"/>
    </copy>
  </target>

  <target name="version" description="version artifacts in the RCS">
    <fail unless="build.number" message="set the build.number property"/>
    <fail unless="repository" message="set the repository property"/>
    <fail unless="build.username" message="set the build.username property"/>
    <fail unless="build.password" message="set the build.password property"/>
    <tempfile property="dist.dir"/>
    <mkdir dir="${dist.dir}/${build.number}"/>
    <property name="dest" value="${dist.dir}/${build.number}"/>
    <antcall target="dist-javadoc"/>
    <antcall target="dist-scaladoc"/>
    <antcall target="dist-src"/>
    <antcall target="dist-test-src"/>
    <antcall target="dist-archive"/>
    <antcall target="dist-etc"/>
    <antcall target="dist-release"/>
    <dirname file="${dest}" property="dest.dirname"/>
    <java classname="org.tmatesoft.svn.cli.SVN" fork="true">
      <classpath refid="libs.path"/>
      <arg value="import"/>
      <arg value="${dest}"/>
      <arg value="${repository}/${repository.artifacts}/${build.number}"/>
      <arg value="--username"/>
      <arg value="${build.username}"/>
      <arg value="--password"/>
      <arg value="${build.password}"/>
    </java>
    <delete dir="${dist.dir}"/>
    <java classname="org.tmatesoft.svn.cli.SVN" fork="true">
      <classpath refid="libs.path"/>
      <arg value="copy"/>
      <arg value="${repository}/${repository.trunk}"/>
      <arg value="${repository}/${repository.tags}/${build.number}"/>
      <arg value="--username"/>
      <arg value="${build.username}"/>
      <arg value="--password"/>
      <arg value="${build.password}"/>
    </java>
    <java classname="org.tmatesoft.svn.cli.SVN" fork="true">
      <classpath refid="libs.path"/>
      <arg value="rm"/>
      <arg value="${repository}/${repository.tags}/latest"/>
      <arg value="--username"/>
      <arg value="${build.username}"/>
      <arg value="--password"/>
      <arg value="${build.password}"/>
      <arg value="--message"/>
      <arg value="Committing latest (${build.number})"/>
    </java>
    <java classname="org.tmatesoft.svn.cli.SVN" fork="true">
      <classpath refid="libs.path"/>
      <arg value="rm"/>
      <arg value="${repository}/${repository.artifacts}/latest"/>
      <arg value="--username"/>
      <arg value="${build.username}"/>
      <arg value="--password"/>
      <arg value="${build.password}"/>
      <arg value="--message"/>
      <arg value="Committing latest (${build.number})"/>
    </java>
    <java classname="org.tmatesoft.svn.cli.SVN" fork="true">
      <classpath refid="libs.path"/>
      <arg value="copy"/>
      <arg value="${repository}/${repository.tags}/${build.number}"/>
      <arg value="${repository}/${repository.tags}/latest"/>
      <arg value="--username"/>
      <arg value="${build.username}"/>
      <arg value="--password"/>
      <arg value="${build.password}"/>
    </java>
    <java classname="org.tmatesoft.svn.cli.SVN" fork="true">
      <classpath refid="libs.path"/>
      <arg value="copy"/>
      <arg value="${repository}/${repository.artifacts}/${build.number}"/>
      <arg value="${repository}/${repository.artifacts}/latest"/>
      <arg value="--username"/>
      <arg value="${build.username}"/>
      <arg value="--password"/>
      <arg value="${build.password}"/>
    </java>
  </target>

  <target name="svn-add" description="add local files scheduling for commit">
    <java classname="org.tmatesoft.svn.cli.SVN" fork="true">
      <classpath refid="libs.path"/>
      <arg value="add"/>
      <arg value="src"/>
      <arg value="${resources.dir}"/>
      <arg value="${etc.dir}"/>
      <arg value="archive.properties"/>
      <arg value="tokens.properties"/>
    </java>
    <java classname="org.tmatesoft.svn.cli.SVN" fork="true">
      <classpath refid="libs.path"/>
      <arg value="propset"/>
      <arg value="svn:ignore"/>
      <arg value="build*&#013;buildj*"/>
      <arg value="."/>
    </java>
  </target>

  <target name="commit-archive" depends="archive" description="commits the archive to the RCS">
    <fail unless="repository" message="set the repository property"/>
    <fail unless="build.username" message="set the build.username property"/>
    <fail unless="build.password" message="set the build.password property"/>
    <tempfile property="temp.dir"/>
    <mkdir dir="${temp.dir}"/>
    <java classname="org.tmatesoft.svn.cli.SVN" fork="true">
      <classpath refid="libs.path"/>
      <arg value="checkout"/>
      <arg value="${repository}/${repository.jar}"/>
      <arg value="${temp.dir}"/>
      <arg value="--username"/>
      <arg value="${build.username}"/>
      <arg value="--password"/>
      <arg value="${build.password}"/>
    </java>
    <copy todir="${temp.dir}" overwrite="true">
      <fileset dir="${build.dir}/archive" includes="${archive.file}"/>
    </copy>
    <java classname="org.tmatesoft.svn.cli.SVN" fork="true">
      <classpath refid="libs.path"/>
      <arg value="commit"/>
      <arg value="${temp.dir}"/>
      <arg value="--message"/>
      <arg value="Commit JAR"/>
      <arg value="--username"/>
      <arg value="${build.username}"/>
      <arg value="--password"/>
      <arg value="${build.password}"/>
    </java>
    <delete dir="${temp.dir}"/>
  </target>

  <target name="copy" description="copy files from ${from} to ${to}">
    <fail unless="from" message="set the from property"/>
    <fail unless="to" message="set the to property"/>
    <property name="includes" value="**/**"/>
    <mkdir dir="${to}"/>
    <copy todir="${to}">
      <fileset dir="${from}" includes="${includes}"/>
    </copy>
  </target>

</project>
